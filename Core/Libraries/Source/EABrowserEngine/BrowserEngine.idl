// Generated .IDL file (by the OLE/COM Object Viewer)
// 
// typelib filename: <could not determine filename>

// NOTE: Import of oaidl.idl has been added to fix compilation error with widl:
// BrowserEngine.idl:31:44: error: type 'IDispatch' not found in global namespace
import "oaidl.idl";
[
  uuid(6EE45698-21BA-420D-AD40-1B547699BEFB),
  version(1.0)
]
library BROWSERENGINELib
{
    // TLib :     // TLib : OLE Automation : {00020430-0000-0000-C000-000000000046}
    importlib("stdole2.tlb");

    // Forward declare all types defined in this typelib
    interface IFEBrowserEngine2;
    interface IFEBrowserInstance2;

    [
      uuid(2B2CC8B0-2DC0-48C6-B6FD-C07820A6477E)
    ]
    coclass FEBrowserEngine2 {
        [default] interface IFEBrowserEngine2;
    };

    [
      odl,
      uuid(EE883B17-0778-4B18-A12B-E44C0D298412),
      dual,
      oleautomation
    ]
    interface IFEBrowserEngine2 : IDispatch {
        [id(0x60020000)]
        HRESULT Initialize(long* d3d_device);
        [id(0x60020001)]
        HRESULT Shutdown();
        [id(0x60020002)]
        HRESULT CreateBrowser(
                        BSTR browsername, 
                        BSTR url, 
                        long parentwindow, 
                        int x, 
                        int y, 
                        int w, 
                        int h, 
                        long option_bitmask, 
                        IDispatch* gameinterface);
        [id(0x60020003)]
        HRESULT DestroyBrowser(BSTR browsername);
        [id(0x60020004)]
        HRESULT Navigate(
                        BSTR browsername, 
                        BSTR url);
        [id(0x60020005)]
        HRESULT GetHWND(
                        BSTR browsername, 
                        [out, retval] long* hwnd);
        [id(0x60020006)]
        HRESULT IsOpen(
                        BSTR browsername, 
                        [out, retval] long* IsOpen);
        [id(0x60020007)]
        HRESULT D3DRender(int backbufferindex);
        [id(0x60020008)]
        HRESULT D3DUpdate();
        [id(0x60020009)]
        HRESULT GetUpdateRate(
                        [in] BSTR browsername, 
                        [out, retval] long* pVal);
        [id(0x6002000a)]
        HRESULT SetUpdateRate(
                        [in] BSTR browsername, 
                        [in] long pVal);
        [id(0x6002000b), propget]
        HRESULT BadPageURL([out, retval] BSTR* pRate);
        [id(0x6002000b), propput]
        HRESULT BadPageURL([in] BSTR pRate);
        [id(0x6002000d), propget]
        HRESULT LoadingPageURL([out, retval] BSTR* pRate);
        [id(0x6002000d), propput]
        HRESULT LoadingPageURL([in] BSTR pRate);
        [id(0x6002000f), propget]
        HRESULT MouseFileName([out, retval] BSTR* pRate);
        [id(0x6002000f), propput]
        HRESULT MouseFileName([in] BSTR pRate);
        [id(0x60020011), propget]
        HRESULT MouseBusyFileName([out, retval] BSTR* pRate);
        [id(0x60020011), propput]
        HRESULT MouseBusyFileName([in] BSTR pRate);
    };

    [
      uuid(812A58AA-39E8-476E-BEED-00D79B76940B)
    ]
    coclass FEBrowserInstance2 {
        [default] interface IFEBrowserInstance2;
    };

    [
      odl,
      uuid(A6759E9F-2CA1-4A04-AF23-1658673E30B5),
      dual,
      oleautomation
    ]
    interface IFEBrowserInstance2 : IDispatch {
        [id(0x60020000)]
        HRESULT Navigate(BSTR url);
        [id(0x60020001)]
        HRESULT RequestURL(
                        [in] VARIANT requesttype, 
                        [in] BSTR url, 
                        [in] BSTR formdata, 
                        [in] BSTR extradata, 
                        [in] VARIANT callback, 
                        [out, retval] VARIANT* result);
        [id(0x60020002)]
        HRESULT CloseBrowser();
        [id(0x60020003), propget]
        HRESULT EngineVersion([out, retval] VARIANT* pVal);
        [id(0x60020004), propget]
        HRESULT gameinterface([out, retval] IDispatch** pVal);
        [id(0x60020005), propget]
        HRESULT CommandLineArgs([out, retval] VARIANT* pVal);
        [id(0x60020006), propget]
        HRESULT IsReleaseBuild([out, retval] long* pVal);
        [id(0x60020007), propget]
        HRESULT InstallFolder([out, retval] BSTR* pVal);
        [id(0x60020008), propget]
        HRESULT hwnd([out, retval] long* pHwnd);
        [id(0x60020009), propget]
        HRESULT UpdateRate([out, retval] long* pRate);
        [id(0x60020009), propput]
        HRESULT UpdateRate([in] long pRate);
        [id(0x6002000b), propget]
        HRESULT Name([out, retval] BSTR* pVal);
        [id(0x6002000c), propget]
        HRESULT SysInfo_OS([out, retval] BSTR* pVal);
        [id(0x6002000d), propget]
        HRESULT SysInfo_RAM([out, retval] long* pVal);
        [id(0x6002000e), propget]
        HRESULT SysInfo_CPUType([out, retval] BSTR* pVal);
        [id(0x6002000f), propget]
        HRESULT SysInfo_CPUSpeed([out, retval] long* pVal);
        [id(0x60020010), propget]
        HRESULT SysInfo_XRes([out, retval] long* pVal);
        [id(0x60020011), propget]
        HRESULT SysInfo_YRes([out, retval] long* pVal);
        [id(0x60020012), propget]
        HRESULT SysInfo_VideoAdapter([out, retval] BSTR* pVal);
    };
};
